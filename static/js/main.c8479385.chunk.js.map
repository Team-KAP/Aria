{"version":3,"sources":["logo.svg","BuildPanel.js","LearnPanel.js","CodePanel.js","TrainPanel.js","JSide.js","kerasCode.js","ModelPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildPanel","props","state","test","input","value","setValue","currentActivation","currentInit","activations","inits","handleChange","bind","event","this","appState","loadable","doSetNumNodes","selectedLayer","target","hideModelPanel","Button","variant","onClick","console","log","doAddLayer","Form","Group","controlId","Label","network","arrLayers","numNodes","Control","type","onChange","min","max","Dropdown","Toggle","id","Menu","map","activation","Item","as","setState","doSetActivation","init","doSetWeightInit","weightInit","Component","LearnPanel","currentOpti","optimizers","losses","handleClick","doSetLearnRate","learningRateDecay","doSetLearningDecay","opti","doSetOptimizer","loss","doSetLoss","learnRate","step","key","className","Check","label","CodePanel","doGetCode","kerasCode","get","layer","code","isFirstLayer","getActivationCode","optimizer","lossDict","epochs","batchSize","doGetCode_","Map","set","class","TrainPanel","handleEpochChange","handleBatchChange","doSetEpochs","doSetBatchSize","JSide","Tabs","defaultActiveKey","Tab","eventKey","title","old_network","reportContent","newOptimizer","String","newBatch","newLearn","newLoss","newEpochs","newDecay","newLayer","push","isLastLayer","newWeight","newNode","newActivation","newBool","layersToGraph","nodeCount","getMaxNodeCount","graph","nodes","edges","prevLayerNodes","i","length","x","vgap","initY","thisLayerNodes","j","node","y","size","connect","prevNode","source","thisNode","edge","ModelPanel","onClickNodeFunc","e","data","SELECTED_LAYER","parseInt","substring","indexOf","doSelectLayer","style","height","onClickNode","settings","maxNodeSize","maxEdgeSize","clone","enableHovering","defaultNodeColor","rescaleIgnoreSize","g","hiddenModelPanel","unhideModelPanel","getSigma","App","new_decay","new_network","copy","setlearningRateDecay","prevState","new_loss","setLoss","new_epochs","setEpochs","new_batch","setBatchSize","selected_layer","new_learn","setLearnRate","new_opt","setOptimizer","new_layer","newNetwork","addLayer","new_num","setNumNodes","new_act","new_weight","new_nodes","setActivation","setWeightInit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8479385.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass BuildPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentActivation: \"<select activation function>\",\r\n            currentInit: \"<select weight initializer>\",\r\n            activations: [\r\n                \"linear\", \"relu\", \"tanh\", \"sigmoid\", \"softmax\"\r\n            ],\r\n            inits: [\r\n                \"zeros\", \"ones\", \"normal\", \"uniform\", \"glorot uniform\", \"he uniform\"\r\n            ],\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        // this.props.appState.selectedLayer\r\n        if (this.props.appState.loadable) {\r\n            this.props.appState.doSetNumNodes(this.props.appState.selectedLayer, event.target.value);\r\n            this.props.appState.hideModelPanel();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br />\r\n                <p>Currently selected layer: {this.props.appState.selectedLayer}</p>\r\n                <Button variant=\"primary\" onClick={() => {\r\n                    console.log(\"adding layer\");\r\n                    this.props.appState.doAddLayer();\r\n                }}>Add Layer</Button>{' '}\r\n                <br />\r\n                {/* {alert(\"selected layer is \" + this.props.appState.selectedLayer)} */}\r\n                <br />\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicRange\">\r\n                        <Form.Label>Node count: {this.props.appState.loadable ? this.props.appState.network.arrLayers[this.props.appState.selectedLayer].numNodes : \"\"}</Form.Label>\r\n                        <Form.Control type=\"range\" \r\n                        onChange={this.handleChange} \r\n                        min=\"1\"\r\n                        max=\"10\"\r\n                        value={this.props.appState.loadable ? this.props.appState.network.arrLayers[this.props.appState.selectedLayer].numNodes : 1}/>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Activation</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.activations.map(activation => {\r\n                            return (\r\n                                <Dropdown.Item as=\"button\"\r\n                                    onClick={() => {\r\n                                        this.setState({ currentActivation: activation });\r\n                                        this.props.appState.doSetActivation(this.props.appState.selectedLayer, activation);\r\n                                    }}\r\n                                >{activation}</Dropdown.Item>\r\n                            )\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br />\r\n                <p>{this.props.appState.loadable ? this.props.appState.network.arrLayers[this.props.appState.selectedLayer].activation : \"\"}</p>\r\n                <br />\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Weight Initializer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.inits.map(init => {\r\n                            return (\r\n                                <Dropdown.Item as=\"button\"\r\n                                    onClick={() => {\r\n                                        this.setState({ currentInit: init });\r\n                                        this.props.appState.doSetWeightInit(this.props.appState.selectedLayer, init);\r\n                                    }}>{init}</Dropdown.Item>\r\n                            )\r\n                        })\r\n                        }\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br />\r\n                <p><p>{this.props.appState.loadable ? this.props.appState.network.arrLayers[this.props.appState.selectedLayer].weightInit : \"\"}</p></p>\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BuildPanel;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass LearnPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentOpti: \"none\",\r\n            optimizers: [\r\n                \"SGD\", \"RMSProp\", \"Adadelta\", \"Adam\"\r\n            ],\r\n            losses: [\r\n                \"Mean Squared Error\", \"Mean Absolute Error\", \"Hinge\"\r\n            ],\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        // this.setState({ unitSliderValue: event.target.value });\r\n        // this.props.appState.selectedLayer\r\n        if (this.props.appState.loadable) {\r\n            this.props.appState.doSetLearnRate(event.target.value)\r\n        }\r\n    }\r\n\r\n    handleClick(event){\r\n        if(this.props.appState.network.learningRateDecay){\r\n            this.props.appState.doSetLearningDecay(false);\r\n        }\r\n        else{\r\n            this.props.appState.doSetLearningDecay(true);\r\n        }\r\n        // alert(this.props.appState.network.learningRateDecay);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <button onClick={() => this.props.appState.doSetOptimizer()}>Hi</button> */}\r\n                <br/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Optimizer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.optimizers.map(opti => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => {\r\n                                    this.setState({currentOpti: opti});\r\n                                    this.props.appState.doSetOptimizer(opti);\r\n                                }}\r\n                                    >{opti}</Dropdown.Item>\r\n                            )\r\n                        })}                        \r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                        <p>Current optimizer: {this.state.currentOpti}</p>\r\n                <br/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Loss Functions</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.losses.map(loss => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => {\r\n                                    // this.setState({currentOpti: loss});\r\n                                    this.props.appState.doSetLoss(loss);\r\n                                }}\r\n                                    >{loss}</Dropdown.Item>\r\n                            )\r\n                        })}                        \r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicRange\">\r\n                        <Form.Label>Learning rate of the network: {this.props.appState.loadable ? this.props.appState.network.learnRate : \"\"}</Form.Label>\r\n                        <Form.Control type=\"range\" \r\n                        onChange={this.handleChange} \r\n                        max=\"0.1\" \r\n                        step=\"0.001\"\r\n                        value={this.props.appState.network.learnRate} />\r\n                    </Form.Group>\r\n                </Form>\r\n                <Form>\r\n                    {['checkbox'].map((type) => (\r\n                        <div key={'learning-rate-decay'} className=\"mb-3\">\r\n                        <Form.Check \r\n                            type={type}\r\n                            id={`learning rate checkbox`}\r\n                            label={`Learning Rate Decay`}\r\n                            onChange={this.handleClick}     \r\n                            // checked={this.props.appState.network.learningRateDecay}                       \r\n                        />\r\n                        </div>\r\n                    ))}\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LearnPanel;\r\n","import React, { Component } from \"react\";\r\nimport \"./CodePanel.css\"\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass CodePanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // currentCode: \"model = Sequential()\",\r\n            kerasCode: new Map(),\r\n            lossDict: new Map(),\r\n        }\r\n        this.state.kerasCode.set(\"beginModel\", \"model = Sequential()\");\r\n        this.state.kerasCode.set(\"addLayer\", \"model.add(Dense(\");\r\n        this.state.kerasCode.set(\"input_dim\", \"input_dim=\");\r\n        this.state.kerasCode.set(\"compile\", \"model.compile(\");\r\n        this.state.kerasCode.set(\"losser\", \"loss=\")\r\n        this.state.kerasCode.set(\"optimizer\", \"optimizer=\");\r\n        this.state.kerasCode.set(\"metrics\", \"metrics=[\");\r\n        this.state.kerasCode.set(\"modelfit\", \"model.fit(x=x_train, y=y_ytrain, epochs=\")\r\n        this.state.kerasCode.set(\"batch\", \"batch_size=\")\r\n        this.state.kerasCode.set(\"learnRate\", \"learning_rate=\");\r\n        this.state.kerasCode.set(\"network_end\", \"))\");\r\n        this.state.kerasCode.set(\"loss\", \"loss=\");\r\n        this.state.kerasCode.set(\"learningRateDecay\", \"decay=\")\r\n\r\n        this.state.lossDict.set(\"Mean Squared Error\", \"mean_squared_error\")\r\n        this.state.lossDict.set(\"Mean Absolute Error\", \"mean_absolute_error\")\r\n        this.state.lossDict.set(\"Hinge\", \"hinge\")\r\n    }\r\n\r\n    getActivationCode(layer) {\r\n        return 'activation=' + \"'\" + layer.activation + \"'\";\r\n    }\r\n\r\n\r\n    doGetCode = (network) => {\r\n        return (<p>\r\n            {this.state.kerasCode.get(\"beginModel\")} <br />\r\n        {network.arrLayers.map(layer => {\r\n            let code = \"\";\r\n            code += this.state.kerasCode.get(\"addLayer\");\r\n            code += layer.numNodes + \", \";\r\n            if (layer.isFirstLayer === true) {\r\n                code += this.state.kerasCode.get(\"input_dim\") + layer.numNodes + \", \";\r\n            }\r\n            if (layer.activation != null) {\r\n                code += this.getActivationCode(layer);\r\n            }\r\n            code += this.state.kerasCode.get(\"network_end\");\r\n\r\n            return(<div>\r\n                {code}\r\n                </div>)\r\n        })}\r\n        {\"opt=\" + \"optimizers.\" + network.optimizer + \"(lr=\" + network.learnRate + \", \" + \"decay=\" + (network.learningRateDecay ? 0.01 : 0) + \", \" + \"momenum=0.9)\"}        \r\n        <br/>\r\n        {this.state.kerasCode.get(\"compile\") + this.state.kerasCode.get(\"loss\") + \"'\" + this.state.lossDict.get(network.loss) + \"'\" + \", \" +\r\n            this.state.kerasCode.get(\"optimizer\") + \"= opt)\" }\r\n            <br/>\r\n    {this.state.kerasCode.get(\"modelfit\") + network.epochs + \", \" + this.state.kerasCode.get(\"batch\") + network.batchSize + this.state.kerasCode.get(\"network_end\")}\r\n        </p>);\r\n    }\r\n\r\n    doGetCode_ = (network) => {\r\n        var code = \"\";\r\n        code += this.state.kerasCode.get(\"beginModel\") + \"\\n\";\r\n        for (let layer of network.arrLayers) {\r\n            code += this.state.kerasCode.get(\"addLayer\");\r\n            code += layer.numNodes + \", \";\r\n            if (layer.isFirstLayer === true) {\r\n                code += this.state.kerasCode.get(\"input_dim\") + layer.numNodes + \", \";\r\n            }\r\n            if (layer.activation != null) {\r\n                code += this.getActivationCode(layer);\r\n            }\r\n            code += this.state.kerasCode.get(\"network_end\") + \"\\n\";\r\n        }\r\n\r\n        code += this.state.kerasCode.get(\"compile\") + this.state.kerasCode.get(\"losser\") + \"'\" + network.loss + \"'\" + \", \" + this.state.kerasCode.get(\"optimizer\") + \"'\" + network.optimizer +\r\n            \"'\" + \", \" + this.state.kerasCode.get(\"metrics\") + \"'\" + \"accuracy\" + \"'\" + \"])\" + \", \" + this.state.kerasCode.get(\"learnRate\") + network.learnRate + this.state.kerasCode.get(\"network_end\") + \"\\n\";\r\n        code += this.state.kerasCode.get(\"modelfit\") + network.epochs + \", \" + this.state.kerasCode.get(\"batch\") + network.batchSize + this.state.kerasCode.get(\"network_end\");\r\n        return code;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>Generated Code</h5>\r\n            <div class=\"codepanel\">\r\n                 <br />\r\n                {/* <h1>Code</h1>\r\n                <p>{this.doGetCode(this.props.appState.network)}</p> */}\r\n                <p>{this.doGetCode(this.props.appState.network)}</p>\r\n                {/* <Form id=\"codebox\">\r\n                <Form.Group controlId=\"codebox\">\r\n                     <Form.Label>Generated Code</Form.Label>\r\n                     \r\n                     <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"test\"/>\r\n                     </Form.Group>\r\n                </Form> */}\r\n\r\n                {/* <input className=\"codepanel\" type=\"text\" value= {this.doGetCode(this.props.appState.network)}/> */}\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodePanel;","import React, { Component } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nclass TrainPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n\r\n        this.handleEpochChange = this.handleEpochChange.bind(this);\r\n        this.handleBatchChange = this.handleBatchChange.bind(this);\r\n    }\r\n\r\n    handleEpochChange(event) {\r\n        this.props.appState.doSetEpochs(event.target.value)\r\n    }\r\n\r\n    handleBatchChange(event) {\r\n        this.props.appState.doSetBatchSize(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br />\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicRange\">\r\n                        <Form.Label>Epochs: {this.props.appState.network.epochs}</Form.Label>\r\n                        <Form.Control type=\"range\"\r\n                            onChange={this.handleEpochChange}\r\n                            max=\"500\" \r\n                            value={this.props.appState.network.epochs}\r\n                            />\r\n                    </Form.Group>\r\n                </Form>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicRange\">\r\n                        <Form.Label>Batch Size: {this.props.appState.network.batchSize}</Form.Label>\r\n                        <Form.Control type=\"range\"\r\n                            onChange={this.handleBatchChange}\r\n                            max=\"256\"\r\n                            step=\"64\" value={this.props.appState.network.batchSize}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrainPanel;","import React, { Component } from \"react\";\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport BuildPanel from \"./BuildPanel.js\"\r\nimport LearnPanel from \"./LearnPanel.js\"\r\nimport CodePanel from \"./CodePanel.js\";\r\nimport TrainPanel from \"./TrainPanel.js\";\r\nimport \"./JSide.css\"\r\nclass JSide extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set state goes here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sidebar\">\r\n        <div id=\"settings\">\r\n          <Tabs defaultActiveKey=\"build\" id=\"settings\">\r\n            <Tab eventKey=\"build\" title=\"Build\">\r\n              <div>\r\n                <BuildPanel appState={this.props.appState} />\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"learn\" title=\"Learn\">\r\n              <div>\r\n                <LearnPanel {...this.props} />\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"train\" title=\"Train\">\r\n              <div>\r\n                <TrainPanel {...this.props} />\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n\r\n        {/* <button onClick={() => this.props.doSetOpt()}>Hi</button> */}\r\n\r\n        <CodePanel appState={this.props.appState}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JSide;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export class network {\r\n    constructor() {\r\n        this.arrLayers = [];\r\n        this.optimizer = \"None\";\r\n        this.learnRate = 0;\r\n        this.loss = 0;\r\n        this.epochs = 0;\r\n        this.batchSize = 0;\r\n        this.learningRateDecay = false; \r\n    }\r\n\r\n\r\n    copy(old_network){\r\n        // console.log(\"keys of old:\");\r\n        // console.log(Object.keys(old_network));\r\n        this.arrLayers = old_network.arrLayers;\r\n        this.optimizer = old_network.optimizer;\r\n        this.learnRate = old_network.learnRate;\r\n        this.learningRateDecay = old_network.learningRateDecay;\r\n        this.loss = old_network.loss;\r\n        this.epochs = old_network.epochs;\r\n        this.batchSize = old_network.batchSize;\r\n        this.reportContent();\r\n    }\r\n\r\n    setOptimizer(newOptimizer){\r\n        this.optimizer = newOptimizer;\r\n    }\r\n\r\n    reportContent() {\r\n        console.log(\"REPORTING NETWORK\")\r\n        console.log(this.arrLayers);\r\n        console.log(\"optimizer: \" + String(this.optimizer));\r\n        console.log(\"learnRate: \" + String(this.learnRate));\r\n        console.log(\"learnRateDecay: \" + String(this.learningRateDecay));\r\n        console.log(\"loss: \" + String(this.loss));\r\n        console.log(\"epochs: \" + String(this.epochs));\r\n        console.log(\"Batch Size: \" + String(this.batchSize));\r\n        console.log(\"Learning Rate Decay: \" + String(this.learningRateDecay));\r\n        console.log(\" \");\r\n    }\r\n\r\n     setBatchSize(newBatch) {\r\n         this.batchSize = newBatch;\r\n     }\r\n     setLearnRate(newLearn) {\r\n         this.learnRate = newLearn;\r\n     } \r\n\r\n     setLoss(newLoss) {\r\n         this.loss = newLoss; \r\n     }\r\n\r\n     setEpochs(newEpochs) {\r\n         this.epochs = newEpochs;\r\n     }\r\n\r\n     setlearningRateDecay(newDecay) {\r\n         this.learningRateDecay = newDecay;\r\n     }\r\n\r\n    // setInit(newInit) {\r\n    //     this.initializer = newInit;\r\n    // }\r\n    addLayer(newLayer) {\r\n        this.arrLayers.push(newLayer);\r\n    }\r\n\r\n    // this.doSomething = function () {\r\n    //     console.log(1);\r\n    // }\r\n\r\n}\r\n\r\nexport class layer {\r\n    constructor(numNodes, activation, isFirstLayer, isLastLayer, weightInit) {\r\n        this.numNodes = numNodes; //temporary\r\n        this.activation = activation; //default\r\n        this.isFirstLayer = isFirstLayer;\r\n        this.weightInit = weightInit;\r\n        //this.isLastLayer = isLastLayer;\r\n    }\r\n    setWeightInit(newWeight) {\r\n        this.weightInit = newWeight;\r\n    }\r\n    setNumNodes(newNode) {\r\n        this.numNodes = newNode;\r\n    }\r\n    setActivation(newActivation) {\r\n        this.activation = newActivation;\r\n    }\r\n    setisFirstLayer(newBool) {\r\n        this.isFirstLayer = newBool;\r\n    }\r\n}\r\n\r\nfunction getActivationCode(layer) {\r\n    return 'activation=' + \"'\" + layer.activation + \"'\";\r\n}\r\n\r\n\r\n\r\n// let new_layer = new layer(10, 'relu', true, false);\r\n// let new_layer1 = new layer(10, 'relu', false, false);\r\n// let networks = new network();\r\n// networks.addLayer(new_layer);\r\n// networks.addLayer(new_layer1);\r\n\r\n// console.log(turntoString(networks));\r\n","import React, { Component } from \"react\";\r\n\r\n// @ts-ignore \r\nimport { Sigma, LoadJSON } from 'react-sigma';\r\n\r\nimport { layer } from './kerasCode.js'\r\n\r\nfunction getMaxNodeCount(arrLayers) {\r\n    let max = 0;\r\n    for (let layer of arrLayers) {\r\n        let nodeCount = layer.numNodes;\r\n        if (nodeCount > max) max = nodeCount;\r\n    }\r\n    return max;\r\n}\r\n\r\nfunction layersToGraph(arrLayers) {\r\n\r\n    let maxNodeCount = getMaxNodeCount(arrLayers);\r\n\r\n    let graph = {};\r\n    let nodes = [];\r\n    let edges = [];\r\n    let prevLayerNodes = []; // cache\r\n\r\n    for (let i = 0; i < arrLayers.length; i++) {\r\n\r\n        let layer = arrLayers[i];\r\n        let nodeCount = layer.numNodes;\r\n\r\n        let x = i * 0.2;\r\n        let vgap = 0.15 - nodeCount / 200;\r\n        let renderHeight = (nodeCount - 1) * vgap;\r\n        let initY = (2.0 - renderHeight) / 2;\r\n\r\n        let thisLayerNodes = [];\r\n\r\n        for (let j = 0; j < nodeCount; j++) {\r\n\r\n            let y = initY + j * vgap;\r\n            let id = i + \",\" + j;\r\n            let size = 1;\r\n\r\n            let node = { x: x, y: y, size: size, id: id };\r\n            nodes.push(node);\r\n            thisLayerNodes.push(node);\r\n        }\r\n\r\n        if (prevLayerNodes.length > 0) { // TODO check this??\r\n            connect(prevLayerNodes, thisLayerNodes, edges);\r\n        }\r\n\r\n        prevLayerNodes = thisLayerNodes;\r\n\r\n    }\r\n\r\n    graph.nodes = nodes;\r\n    graph.edges = edges;\r\n    return graph;\r\n\r\n}\r\n\r\nfunction connect(prevLayerNodes, thisLayerNodes, edges) {\r\n\r\n    for (let i = 0; i < prevLayerNodes.length; i++) {\r\n\r\n        let prevNode = prevLayerNodes[i];\r\n        let source = prevNode.id;\r\n\r\n        for (let j = 0; j < thisLayerNodes.length; j++) {\r\n\r\n            let thisNode = thisLayerNodes[j];\r\n\r\n            let id = \"e_\" + prevNode.id + \",\" + thisNode.id;\r\n            let target = thisNode.id;\r\n            let size = 1 - (prevLayerNodes.length * thisLayerNodes.length) / 100;\r\n\r\n            let edge = { id: id, source: source, target: target, size: size };\r\n            edges.push(edge);\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction writer(g) { // TODO\r\n    let content = JSON.stringify(g);\r\n    // fs.writeFile('graph.json', content, err => {\r\n    //     if (err) {\r\n    //       console.error(err)\r\n    //       return\r\n    //     }\r\n    //     //file written successfully\r\n    //   })\r\n}\r\n\r\n// function genLayers() {\r\n//     let arrLayers = [];\r\n//     let temp3 = new layer(2, 'softmax', false, true);\r\n//     let temp4 = new layer(6, 'softmax', false, true);\r\n//     let temp5 = new layer(8, 'softmax', false, true);\r\n//     let temp56 = new layer(4, 'softmax', false, true);\r\n//     let temp6 = new layer(1, 'softmax', false, true);\r\n//     arrLayers.push(temp3, temp5, temp4, temp56, temp6);\r\n//     return arrLayers;\r\n// }\r\n\r\nexport class ModelPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onClickNodeFunc = (e) => {\r\n        const node = e.data.node;\r\n        const id = node.id;\r\n        const SELECTED_LAYER = parseInt(id.substring(0,id.indexOf(\",\")));\r\n        this.props.appState.doSelectLayer(SELECTED_LAYER);\r\n    }\r\n    \r\n    getSigma(data) {\r\n        // console.log(\"rendering using data: \");\r\n        // console.log(data);\r\n        let s = <Sigma \r\n            graph={data} \r\n            style={{ height: \"100%\" }}\r\n            onClickNode={this.onClickNodeFunc}\r\n            settings={{\r\n                maxNodeSize: 15, maxEdgeSize: 0.3,\r\n                clone: false, \r\n                enableHovering: true,\r\n                defaultNodeColor: \"#fff\",\r\n                rescaleIgnoreSize: false, // TODO change?\r\n            }}>\r\n        </Sigma>\r\n    \r\n        //writer(data);\r\n    \r\n        // let s2 = \r\n        // <Sigma>\r\n        //     <LoadJSON url=\"/graph.json\">\r\n    \r\n        //     </LoadJSON>\r\n        // </Sigma>\r\n        return s;\r\n    }\r\n\r\n    render() {\r\n        \r\n        // let r = parseInt(Math.random() * 5);\r\n        // let preloaded = layersToGraph(genLayers().slice(0, 5));\r\n\r\n        let layers = this.props.appState.network.arrLayers;\r\n        let g = layersToGraph(layers);\r\n\r\n        // console.log(\"preloaded\");\r\n        // console.log(preloaded);\r\n        // console.log(\"g\");\r\n        // console.log(g);\r\n        // console.log(JSON.stringify(g));\r\n\r\n        if (!this.props.appState.hiddenModelPanel) {\r\n                \r\n            return (\r\n                <div id=\"content\">\r\n                    <h3>Model Architecture</h3>\r\n                    <div style={{ height: \"90%\" }}>                   \r\n                        {this.getSigma(g)}\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n\r\n        }  else {\r\n            this.props.appState.unhideModelPanel(); // re-render!\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport ReactBootstrap from 'react-bootstrap';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport JSide from \"./JSide.js\";\r\nimport { network, layer } from \"./kerasCode.js\";\r\nimport { ModelPanel } from \"./ModelPanel.js\"\r\nimport { isTSTypeAliasDeclaration } from '@babel/types';\r\n//import {NetworkGraph} from \"./ModelPanel.js\"\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hiddenModelPanel: false,\r\n      hideModelPanel: () => this.hideModelPanel(),\r\n      unhideModelPanel: () => this.unhideModelPanel(),\r\n      network: new network(),\r\n      selectedLayer: 0,\r\n      loadable: false,\r\n      doSelectLayer: selected_layer => this.doSelectLayer(selected_layer), // pass to modelPanel\r\n      doAddLayer: () => this.doAddLayer(), // pass to buildPanel, to call as needed\r\n      doSetOptimizer: new_opt => this.doSetOptimizer(new_opt),\r\n      doSetActivation: (layer, new_act) => this.doSetActivation(layer, new_act),\r\n      doSetWeightInit: (layer, new_weight) => this.doSetWeightInit(layer, new_weight),\r\n      doSetNumNodes: (layer, new_nodes) => this.doSetNumNodes(layer, new_nodes),\r\n      doSetLearnRate: (new_learn) => this.doSetLearnRate(new_learn),\r\n      doSetEpochs: (new_epochs) => this.doSetEpochs(new_epochs),\r\n      doSetBatchSize: (new_batch) => this.doSetBatchSize(new_batch),\r\n      doSetLoss: (new_loss) => this.doSetLoss(new_loss),\r\n      doSetLearningDecay: (new_decay) => this.doSetLearningDecay(new_decay),\r\n\r\n    }\r\n  }\r\n  doSetLearningDecay = new_decay => {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n    new_network.setlearningRateDecay(new_decay);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n  doSetLoss = new_loss => {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n    new_network.setLoss(new_loss);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n  doSetEpochs = new_epochs => {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n    new_network.setEpochs(new_epochs);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n\r\n  doSetBatchSize = new_batch => {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n    new_network.setBatchSize(new_batch);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n  doSelectLayer = selected_layer => {\r\n    this.setState(prevState => {\r\n      return {\r\n        selectedLayer: selected_layer\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  doSetLearnRate = new_learn => {\r\n    let new_network = new network();\r\n\r\n    new_network.copy(this.state.network);\r\n    new_network.setLearnRate(new_learn);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n\r\n  }\r\n\r\nhideModelPanel = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      hiddenModelPanel: true,\r\n    }\r\n  })\r\n}\r\n\r\nunhideModelPanel = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      hiddenModelPanel: false,\r\n    }\r\n  })\r\n}\r\n\r\n  doSetOptimizer = new_opt => {\r\n    console.log(\"starting\");\r\n    // const network = this.state.network;\r\n    // network.theoptimizer = \"test\";\r\n    // this.state.network.reportContent();\r\n    let new_network = new network();\r\n\r\n    new_network.copy(this.state.network);\r\n    new_network.setOptimizer(new_opt);\r\n    // new_network.reportContent();\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n    // console.log(\"after setting state\");\r\n    // this.state.network.reportContent();\r\n    // console.log(\"finished\");\r\n  }\r\n\r\n  doAddLayer = () => {\r\n    let new_layer = new layer(10, 'relu', false, false);\r\n    const newNetwork = new network();\r\n    newNetwork.copy(this.state.network);\r\n\r\n    if (newNetwork.arrLayers.length === 0) {\r\n      new_layer.isFirstLayer = true;\r\n    }\r\n    newNetwork.addLayer(new_layer);\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        network: newNetwork,\r\n        loadable: true\r\n      }\r\n    })\r\n\r\n    this.hideModelPanel();\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} layer numeric id of the layer\r\n   * @param {*} new_act new activation function to be set\r\n   */\r\n  doSetActivation(layer, new_act) {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n\r\n    new_network.arrLayers[layer].setActivation(new_act);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n\r\n  doSetWeightInit(layer, new_weight) {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n\r\n    new_network.arrLayers[layer].setWeightInit(new_weight);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n\r\n  doSetNumNodes = (layer, new_num) => {\r\n    let new_network = new network();\r\n    new_network.copy(this.state.network);\r\n\r\n    new_network.arrLayers[layer].setNumNodes(new_num);\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"wrapper\">\r\n\r\n        <button onClick={() => this.state.network.reportContent()}>Report Network</button>\r\n\r\n        {/* <NetworkGraph appState={this.state}/> */}\r\n        <ModelPanel appState={this.state} />\r\n        <JSide appState={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n// function JMain() {\r\n//   return (\r\n//     <div id=\"content\" style={{backgroundColor: \"#444\"}}>\r\n//       {/* <img src=\"https://cmkt-image-prd.freetls.fastly.net/0.1.0/ps/3798405/600/400/m2/fpnw/wm0/3-.png?1514983771&s=8aab9047868045a98147b3068d8c8071\"></img> */}\r\n//         <ModelPanel />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\n//import './index.css';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
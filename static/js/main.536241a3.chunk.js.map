{"version":3,"sources":["logo.svg","BuildPanel.js","LearnPanel.js","JNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildPanel","props","state","test","input","value","setValue","currentActivation","currentInit","activations","inits","Dropdown","Toggle","variant","id","Menu","this","map","activation","Item","as","onClick","setState","init","Component","LearnPanel","currentOpti","optimizers","opti","JNav","Tabs","defaultActiveKey","Tab","eventKey","title","JMain","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,+KC6D5BC,E,kDAzDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,MAAO,EACPC,SAAU,EACVC,kBAAmB,+BACnBC,YAAa,6BACbC,YAAa,CACT,+BAAgC,OAAQ,OAAQ,UAAW,WAE/DC,MAAO,CACH,6BAA8B,QAAS,OAAQ,SAAU,UAAW,iBAAkB,eAb/E,E,qDAkBT,IAAD,OACL,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,cACA,kBAACH,EAAA,EAASI,KAAV,KACKC,KAAKd,MAAMO,YAAYQ,KAAI,SAAAC,GACxB,OACI,kBAACP,EAAA,EAASQ,KAAV,CAAeC,GAAG,SAClBC,QAAS,kBAAM,EAAKC,SAAS,CAACf,kBAAmBW,MAC3CA,QAKtB,6BACQ,2BAAIF,KAAKd,MAAMK,mBACvB,6BACA,kBAACI,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,sBACA,kBAACH,EAAA,EAASI,KAAV,KACKC,KAAKd,MAAMQ,MAAMO,KAAI,SAAAM,GAClB,OACI,kBAACZ,EAAA,EAASQ,KAAV,CAAeC,GAAG,SAClBC,QAAS,kBAAM,EAAKC,SAAS,CAACd,YAAae,MAASA,QAMpE,6BACQ,2BAAIP,KAAKd,MAAMM,aACvB,kC,GAnDSgB,aCwCVC,E,kDAvCX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,MAAO,EACPC,SAAU,EACVoB,YAAa,+BACbC,WAAY,CACR,qBAAsB,OAAQ,OAAQ,UAAW,YAT1C,E,qDAcT,IAAD,OACL,OACI,6BACI,mCACA,kBAAChB,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,aACA,kBAACH,EAAA,EAASI,KAAV,KACKC,KAAKd,MAAMyB,WAAWV,KAAI,SAAAW,GACvB,OACI,kBAACjB,EAAA,EAASQ,KAAV,CAAeC,GAAG,SAClBC,QAAS,kBAAM,EAAKC,SAAS,CAACI,YAAaE,MACrCA,QAKtB,6BACQ,2BAAIZ,KAAKd,MAAMwB,aACvB,kC,GAjCSF,aCgCVK,E,kDA5Bb,WAAY5B,GAAQ,uCACZA,G,qDAKN,OACE,yBAAKa,GAAG,WACN,kBAACgB,EAAA,EAAD,CAAMC,iBAAiB,QAAQjB,GAAG,YAChC,kBAACkB,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,6BACA,kBAAC,EAAelB,KAAKf,SAGvB,kBAAC+B,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,6BACA,kBAAC,EAAelB,KAAKf,SAGvB,kBAAC+B,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,yC,GArBOV,aC2BnB,SAASW,IACP,OACE,yBAAKrB,GAAG,YAQGsB,M,kDAnCf,WAAYnC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,GAFG,E,qDASd,OACE,yBAAKmC,MAAM,WACT,kBAACF,EAAD,MACA,kBAAC,EAASnB,KAAKd,Y,GAbLsB,aCKEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.536241a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nclass BuildPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentActivation: \"<select activation function>\",\r\n            currentInit: \"<select weight initializer\",\r\n            activations: [\r\n                \"<select activation function>\", \"relu\", \"tanh\", \"sigmoid\", \"softmax\"\r\n            ],\r\n            inits: [\r\n                \"<select weight initializer\", \"zeros\", \"ones\", \"normal\", \"uniform\", \"glorot uniform\", \"he uniform\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Activation</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.activations.map(activation => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => this.setState({currentActivation: activation})}\r\n                                    >{activation}</Dropdown.Item>\r\n                            )\r\n                        })}                        \r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                        <p>{this.state.currentActivation}</p>\r\n                <br/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Weight Initializer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.inits.map(init => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => this.setState({currentInit: init})}>{init}</Dropdown.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                        <p>{this.state.currentInit}</p>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BuildPanel;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nclass LearnPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentOpti: \"<select activation function>\",\r\n            optimizers: [\r\n                \"<select optimizer>\", \"relu\", \"tanh\", \"sigmoid\", \"softmax\"\r\n            ],\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>test</p>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Optimizer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.optimizers.map(opti => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => this.setState({currentOpti: opti})}\r\n                                    >{opti}</Dropdown.Item>\r\n                            )\r\n                        })}                        \r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                        <p>{this.state.currentOpti}</p>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LearnPanel;\r\n","import React, { Component } from \"react\";\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport BuildPanel from \"./BuildPanel.js\"\r\nimport LearnPanel from \"./LearnPanel.js\"\r\n\r\nclass JNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set state goes here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sidebar\">\r\n        <Tabs defaultActiveKey=\"build\" id=\"settings\">\r\n          <Tab eventKey=\"build\" title=\"Build\">\r\n            <div>\r\n            <BuildPanel {...this.props} />\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey=\"learn\" title=\"Learn\">\r\n            <div>\r\n            <LearnPanel {...this.props} />\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey=\"train\" title=\"Train\">\r\n            <p>lul</p>\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JNav;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport ReactBootstrap from 'react-bootstrap';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport JNav from \"./JNav.js\";\r\n// import network from \"./kerasCode.js\";\r\n\r\nclass App extends Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.state = {\r\n    // network: new network(),\r\n    // addLayer: () => this.addLayer(), // pass to buildPanel, to call as needed\r\n  }\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <div class=\"wrapper\">\r\n        <JMain />\r\n        <JNav {...this.state} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // addLayer() { // TODO\r\n  //   const network = this.state.network;\r\n  //   alert(\"Added Layer!\");\r\n  // }\r\n  \r\n}\r\n\r\n\r\nfunction JMain() {\r\n  return (\r\n    <div id=\"content\">\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\n//import './index.css';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
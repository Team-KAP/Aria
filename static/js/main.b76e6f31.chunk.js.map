{"version":3,"sources":["logo.svg","BuildPanel.js","JNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildPanel","props","Form","Group","controlId","Label","Control","type","inputRef","ref","myInput","Component","JNav","Tabs","defaultActiveKey","id","Tab","eventKey","title","class","JMain","App","state","units","test","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,6KCoB5BC,E,kDAhBX,WAAYC,GAAO,uCACTA,G,qDAGD,IAAD,OACJ,OACI,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,QAAQC,SAAU,SAAAC,GAAS,EAAKC,QAAUD,W,GAVpDE,aC8BVC,E,kDA3Bb,WAAYX,GAAQ,uCACZA,G,qDAKN,OACE,kBAACY,EAAA,EAAD,CAAMC,iBAAiB,QAAQC,GAAG,YAChC,kBAACC,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,6BACA,gCACA,kBAAC,EAAD,CAAYC,MAAM,cAGpB,kBAACH,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,6BACE,qCAGJ,kBAACF,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B,wC,GArBSP,aCsBnB,SAASS,IACP,OACE,8BAMWC,M,kDA5Bf,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACDqB,MAAQ,CACXC,MAAO,EACPC,KAAM,IAJQ,E,qDASd,OACE,yBAAKL,MAAM,WACT,4BACA,kBAAC,EAASM,KAAKH,OACf,kBAACF,EAAD,W,GAdUT,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b76e6f31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass BuildPanel extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Form>\r\n            <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Label>Range</Form.Label>\r\n                <Form.Control type=\"range\" inputRef={ref => { this.myInput = ref;}}/>\r\n            </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BuildPanel;\r\n","import React, { Component } from \"react\";\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport BuildPanel from \"./BuildPanel.js\"\r\n\r\nclass JNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set state goes here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Tabs defaultActiveKey=\"build\" id=\"settings\">\r\n        <Tab eventKey=\"build\" title=\"Build\">\r\n          <div>\r\n          <p>o</p>\r\n          <BuildPanel class=\"sidebar\" />\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"learn\" title=\"Learn\">\r\n          <div>\r\n            <p>mega</p>\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"train\" title=\"Train\">\r\n          <p>lul</p>\r\n        </Tab>\r\n      </Tabs>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JNav;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport ReactBootstrap from 'react-bootstrap';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport JNav from \"./JNav.js\";\r\n\r\nclass App extends Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.state = {\r\n    units: 0,\r\n    test: 13\r\n  }\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <div class=\"wrapper\">\r\n        <p></p>\r\n        <JNav {...this.state} />\r\n        <JMain />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction JMain() {\r\n  return (\r\n    <div></div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\n//import './index.css';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
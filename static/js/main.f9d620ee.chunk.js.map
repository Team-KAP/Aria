{"version":3,"sources":["logo.svg","BuildPanel.js","LearnPanel.js","CodePanel.js","TrainPanel.js","JSide.js","kerasCode.js","ModelPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildPanel","props","state","test","input","value","setValue","currentActivation","currentInit","activations","inits","Button","variant","onClick","console","log","appState","doAddLayer","Dropdown","Toggle","id","Menu","this","map","activation","Item","as","setState","init","Component","LearnPanel","currentOpti","optimizers","opti","doSetOptimizer","CodePanel","currentCode","class","TrainPanel","JSide","Tabs","defaultActiveKey","Tab","eventKey","title","network","arrLayers","optimizer","metrics","loss","old_network","reportContent","newOptimizer","newLayer","push","layer","numNodes","isFirstLayer","isLastLayer","newNode","newActivation","newBool","kerasCode","Map","set","layersToGraph","max","nodeCount","getMaxNodeCount","graph","nodes","edges","prevLayerNodes","i","length","x","vgap","initY","thisLayerNodes","j","node","y","size","connect","prevNode","source","thisNode","edge","target","ModelPanel","layers","g","style","backgroundColor","height","settings","maxNodeSize","maxEdgeSize","clone","defaultNodeColor","App","new_opt","new_network","copy","setOptimizer","prevState","new_layer","newNetwork","addLayer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9d620ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass BuildPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentActivation: \"<select activation function>\",\r\n            currentInit: \"<select weight initializer>\",\r\n            activations: [\r\n                \"<select activation function>\", \"relu\", \"tanh\", \"sigmoid\", \"softmax\"\r\n            ],\r\n            inits: [\r\n                \"<select weight initializer>\", \"zeros\", \"ones\", \"normal\", \"uniform\", \"glorot uniform\", \"he uniform\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br />\r\n                <Button variant=\"primary\" onClick={()=>{\r\n                    console.log(\"adding layer\");\r\n                    this.props.appState.doAddLayer();\r\n                }}>Add Layer</Button>{' '}\r\n                <br />\r\n                <br />\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Activation</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.activations.map(activation => {\r\n                            return (\r\n                                <Dropdown.Item as=\"button\"\r\n                                onClick={() => {\r\n                                    this.setState({currentActivation: activation});\r\n                                    // this.props.appState.doSetOptimizer(activation);\r\n                                }}\r\n                                >{activation}</Dropdown.Item>\r\n                            )\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br />\r\n                <p>{this.state.currentActivation}</p>\r\n                <br />\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Weight Initializer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.inits.map(init => {\r\n                            return (\r\n                                <Dropdown.Item as=\"button\"\r\n                                    onClick={() => {\r\n                                        this.setState({ currentInit: init });\r\n                                        // this.props.appState.doSetInitializer(init);\r\n                                    }}>{init}</Dropdown.Item>\r\n                            )\r\n                        })\r\n                        }\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br />\r\n                <p>{this.state.currentInit}</p>\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BuildPanel;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nclass LearnPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: 13,\r\n            input: 12,\r\n            value: 0,\r\n            setValue: 0,\r\n            currentOpti: \"<select optimizer>\",\r\n            optimizers: [\r\n                \"<select optimizer>\", \"SGD\", \"RMSProp\", \"Adadelta\", \"Adam\"\r\n            ],\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <button onClick={() => this.props.appState.doSetOptimizer()}>Hi</button> */}\r\n                <br/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Optimizer</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {this.state.optimizers.map(opti => {\r\n                            return(\r\n                                <Dropdown.Item as=\"button\" \r\n                                onClick={() => {\r\n                                    this.setState({currentOpti: opti});\r\n                                    this.props.appState.doSetOptimizer(opti);\r\n                                }}\r\n                                    >{opti}</Dropdown.Item>\r\n                            )\r\n                        })}                        \r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <br/>\r\n                        <p>{this.state.currentOpti}</p>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LearnPanel;\r\n","import React, { Component } from \"react\";\r\nimport \"./CodePanel.css\"\r\nclass CodePanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentCode: \"model = Sequential()\"\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"codepanel\">\r\n                <h1>Code</h1>\r\n                <p>{this.state.currentCode}</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodePanel;","import React, { Component } from \"react\";\r\n\r\nclass TrainPanel extends Component {\r\n    render() {\r\n        return (\r\n        <div>\r\n            <br/>\r\n            <p>\r\n                TrainPanel\r\n            </p>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrainPanel;","import React, { Component } from \"react\";\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport BuildPanel from \"./BuildPanel.js\"\r\nimport LearnPanel from \"./LearnPanel.js\"\r\nimport CodePanel from \"./CodePanel.js\";\r\nimport TrainPanel from \"./TrainPanel.js\";\r\nimport \"./JSide.css\"\r\nclass JSide extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set state goes here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sidebar\">\r\n        <div class=\"settings\">\r\n          <Tabs defaultActiveKey=\"build\" id=\"settings\">\r\n            <Tab eventKey=\"build\" title=\"Build\">\r\n              <div>\r\n                <BuildPanel appState={this.props.appState} />\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"learn\" title=\"Learn\">\r\n              <div>\r\n                <LearnPanel {...this.props} />\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"train\" title=\"Train\">\r\n              <div>\r\n                <TrainPanel {...this.props} />\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n\r\n        {/* <button onClick={() => this.props.doSetOpt()}>Hi</button> */}\r\n\r\n        <CodePanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JSide;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export class network {\r\n    constructor() {\r\n        this.arrLayers = [];\r\n        this.optimizer = 0;\r\n        this.metrics = 0;\r\n        this.loss = 0;\r\n    }\r\n\r\n\r\n    copy(old_network){\r\n        // console.log(\"keys of old:\");\r\n        // console.log(Object.keys(old_network));\r\n        this.arrLayers = old_network.arrLayers;\r\n        this.optimizer = old_network.optimizer;\r\n        this.metrics = old_network.metrics;\r\n        this.loss = old_network.loss;\r\n        this.reportContent();\r\n    }\r\n\r\n    setOptimizer(newOptimizer){\r\n        this.optimizer = newOptimizer;\r\n    }\r\n\r\n    reportContent() {\r\n        console.log(this.arrLayers);\r\n        console.log(this.optimizer);\r\n        console.log(this.metrics);\r\n        console.log(this.loss);\r\n        console.log(\" \");\r\n    }\r\n\r\n    // setMetrics(newMetrics) {\r\n    //     this.metrics = newMetrics;\r\n    // } \r\n\r\n    // setLoss(newLoss) {\r\n    //     this.loss = newLoss; \r\n    // }\r\n\r\n    // setInit(newInit) {\r\n    //     this.initializer = newInit;\r\n    // }\r\n    addLayer(newLayer) {\r\n        this.arrLayers.push(newLayer);\r\n    }\r\n\r\n    // this.doSomething = function () {\r\n    //     console.log(1);\r\n    // }\r\n\r\n}\r\n\r\nexport class layer {\r\n    constructor(numNodes, activation, isFirstLayer, isLastLayer) {\r\n        this.numNodes = numNodes; //temporary\r\n        this.activation = activation; //default\r\n        this.isFirstLayer = isFirstLayer;\r\n        //this.isLastLayer = isLastLayer;\r\n    }\r\n    setNumNodes(newNode) {\r\n        this.numNodes = newNode;\r\n    }\r\n    setActivation(newActivation) {\r\n        this.activation = newActivation;\r\n    }\r\n    setisFirstLayer(newBool) {\r\n        this.isFirstLayer = newBool;\r\n    }\r\n}\r\n\r\nlet kerasCode = new Map();\r\nkerasCode.set(\"beginModel\", \"model = Sequential()\");\r\nkerasCode.set(\"addLayer\", \"model.add(Dense(\");\r\nkerasCode.set(\"input_dim\", \"input_dim=\");\r\nkerasCode.set(\"compile\", \"model.compile(\");\r\nkerasCode.set(\"losser\", \"loss=\")\r\nkerasCode.set(\"optimizer\", \"optimizer=\");\r\nkerasCode.set(\"metrics\", \"metrics=[\");\r\nkerasCode.set(\"network_end\", \"))\");\r\n\r\nfunction getActivationCode(layer) {\r\n    return 'activation=' + \"'\" + layer.activation + \"'\";\r\n}\r\n\r\nfunction turntoString(network) {\r\n    var code = \"\";\r\n    code += kerasCode.get(\"beginModel\") + \"\\n\";\r\n    for (let layer of network.arrLayers) {\r\n        code += kerasCode.get(\"addLayer\");\r\n        code += layer.numNodes + \", \";\r\n        if (layer.isFirstLayer === true) {\r\n            code += kerasCode.get(\"input_dim\") + layer.numNodes + \", \";\r\n        }\r\n        if (layer.activation != null) {\r\n            code += getActivationCode(layer);\r\n        }\r\n        code += kerasCode.get(\"network_end\") + \"\\n\";\r\n    }\r\n\r\n    code += kerasCode.get(\"compile\") + kerasCode.get(\"losser\") + \"'\" + network.loss + \"'\" + \", \" + kerasCode.get(\"optimizer\") + \"'\" + network.optimizer +\r\n        \"'\" + \", \" + kerasCode.get(\"metrics\") + \"'\" + network.metrics + \"'\" + \"])\"\r\n    return code;\r\n}\r\n\r\n// array = []\r\n// temp = new layer();\r\n// let networks = new network()\r\n// networks.optimizer = \"adam\";\r\n// temp3 = new layer(8, 'softmax', false, true);\r\n// networks.arrLayers.push(temp3)\r\n// turntoString(networks);\r\n\r\n","import React, { Component } from \"react\";\r\n// @ts-ignore \r\nimport {Sigma, RandomizeNodePositions, RelativeSize} from 'react-sigma';\r\nimport {layer} from './kerasCode.js'\r\n\r\nfunction getMaxNodeCount(arrLayers) {\r\n    let max = 0;\r\n    for (let layer of arrLayers) {\r\n        let nodeCount = layer.numNodes;\r\n        if (nodeCount > max) max = nodeCount;\r\n    }\r\n    return max;\r\n}\r\n\r\nfunction layersToGraph(arrLayers) {\r\n\r\n    const maxNodeCount = getMaxNodeCount(arrLayers);\r\n\r\n    const graph = {};\r\n    const nodes = [];  \r\n    const edges = [];\r\n    let prevLayerNodes = []; // cache\r\n\r\n    for (let i = 0; i < arrLayers.length; i++) {\r\n\r\n        const layer = arrLayers[i];\r\n        const nodeCount = layer.numNodes;\r\n        \r\n        const x = i * 0.2;\r\n        const vgap = 0.15 - nodeCount/200;  \r\n        const renderHeight = (nodeCount-1) * vgap;\r\n        const initY = (2.0 - renderHeight)/2;\r\n\r\n        const thisLayerNodes = [];\r\n        \r\n        for (let j = 0; j < nodeCount; j++) {\r\n\r\n            let y = initY + j*vgap;\r\n            let id = i + \",\" + j;\r\n            let size = 1; \r\n            \r\n            const node = {x: x, y: y, size: size, id: id};\r\n            nodes.push(node);\r\n            thisLayerNodes.push(node);   \r\n        }\r\n\r\n        if (prevLayerNodes) {\r\n            connect(prevLayerNodes, thisLayerNodes, edges);\r\n        }\r\n\r\n        prevLayerNodes = thisLayerNodes;\r\n\r\n    }\r\n\r\n    graph.nodes = nodes;\r\n    graph.edges = edges;\r\n    return graph;\r\n\r\n}\r\n\r\nfunction connect(prevLayerNodes, thisLayerNodes, edges) {\r\n\r\n    for (let i = 0; i < prevLayerNodes.length; i++) {\r\n        \r\n        const prevNode = prevLayerNodes[i];\r\n        let source = prevNode.id;\r\n        \r\n        for (let j = 0; j < thisLayerNodes.length; j++) {\r\n\r\n            const thisNode = thisLayerNodes[j];\r\n                \r\n            let id = \"e_\" + prevNode.id + \",\" + thisNode.id;\r\n            let target = thisNode.id;\r\n            let size = 1 - (prevLayerNodes.length * thisLayerNodes.length)/100;\r\n            \r\n            const edge = {id: id, source: source, target: target, size: size};\r\n            edges.push(edge);\r\n\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nfunction genLayers() {\r\n    let arrLayers = [];\r\n    let temp3 = new layer(2, 'softmax', false, true);\r\n    let temp4 = new layer(6, 'softmax', false, true);\r\n    let temp5 = new layer(8, 'softmax', false, true);\r\n    let temp56 = new layer(4, 'softmax', false, true);\r\n    let temp6 = new layer(1, 'softmax', false, true);\r\n    arrLayers.push(temp3, temp5, temp4, temp56, temp6);\r\n    return arrLayers;\r\n}\r\n\r\n\r\n\r\nclass ModelPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let layers = this.props.appState.network.arrLayers;\r\n        console.log(layers);\r\n        let g = layersToGraph(layers);\r\n        console.log(g);\r\n\r\n// zoomMax: 0.1, \r\n        return (\r\n            <div id=\"content\">\r\n                <h1>Model</h1>\r\n                <div style={{backgroundColor: \"#333\", height:\"90%\"}}>\r\n                    <Sigma graph={g} style={{height: \"100%\"}} \r\n                    settings={{\r\n                        maxNodeSize: 15, maxEdgeSize: 0.3,\r\n                        clone: false, defaultNodeColor: \"#fff\"\r\n                        }}>\r\n                    </Sigma>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelPanel;","import React, { Component } from 'react';\r\nimport ReactBootstrap from 'react-bootstrap';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport JSide from \"./JSide.js\";\r\nimport { network, layer } from \"./kerasCode.js\";\r\nimport ModelPanel from \"./ModelPanel.js\"\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      network: new network(),\r\n      doAddLayer: () => this.doAddLayer(), // pass to buildPanel, to call as needed\r\n      doSetOptimizer: new_opt => this.doSetOptimizer(new_opt),\r\n\r\n    }\r\n  }\r\n\r\n  doSetOptimizer = new_opt => {\r\n    console.log(\"starting\");\r\n    // const network = this.state.network;\r\n    // network.theoptimizer = \"test\";\r\n    // this.state.network.reportContent();\r\n    let new_network = new network();\r\n\r\n    new_network.copy(this.state.network);\r\n    new_network.setOptimizer(new_opt);\r\n    // new_network.reportContent();\r\n    this.setState(prevState => {\r\n      return {\r\n        network: new_network\r\n      }\r\n    })\r\n    // console.log(\"after setting state\");\r\n    // this.state.network.reportContent();\r\n    // console.log(\"finished\");\r\n  }\r\n\r\n  doAddLayer = () => {\r\n    let new_layer = new layer(10, 'relu', false, false);\r\n    const newNetwork = new network();\r\n    newNetwork.copy(this.state.network);\r\n\r\n    if (newNetwork.arrLayers.length === 0) {\r\n      new_layer.isFirstLayer = true;\r\n    }\r\n    newNetwork.addLayer(new_layer);\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        network: newNetwork\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"wrapper\">\r\n        <p>\r\n          <br />\r\n          {this.state.network.optimizer} <br />\r\n        </p>\r\n\r\n        {/* <button onClick={() => this.changeOptimizer()}>Hi</button> */}\r\n        <ModelPanel appState={this.state}/>\r\n        <JSide appState={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n// function JMain() {\r\n//   return (\r\n//     <div id=\"content\" style={{backgroundColor: \"#444\"}}>\r\n//       {/* <img src=\"https://cmkt-image-prd.freetls.fastly.net/0.1.0/ps/3798405/600/400/m2/fpnw/wm0/3-.png?1514983771&s=8aab9047868045a98147b3068d8c8071\"></img> */}\r\n//         <ModelPanel />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\n//import './index.css';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}